From 8df6c137f5cb72020df026961c66f62959cc23a7 Mon Sep 17 00:00:00 2001
From: sherpya <sherpya@netfarm.it>
Date: Thu, 21 Mar 2013 10:29:04 +0100
Subject: [PATCH 10/28] win32: filename glob() + unicode

---
 osdep/glob-win.c | 69 ++++++++++++++++++++++++++++++++++++++++++++++++++++----
 parser-mpcmd.c   | 30 ++++++++++++++++++++++++
 2 files changed, 94 insertions(+), 5 deletions(-)

diff --git a/osdep/glob-win.c b/osdep/glob-win.c
index d67d6dd..966edf2 100644
--- a/osdep/glob-win.c
+++ b/osdep/glob-win.c
@@ -26,18 +26,77 @@
 #include <windows.h>
 #include "glob.h"
 
+union FIND_DATA {
+    WIN32_FIND_DATAA ansi;
+    WIN32_FIND_DATAW wide;
+};
+
+static int is_wide = 1;
+
+#ifdef __GNUC__
+__attribute__((constructor)) static void detectOS(void) {
+    OSVERSIONINFOA osv;
+    memset(&osv, 0, sizeof(osv));
+    osv.dwOSVersionInfoSize = sizeof(OSVERSIONINFOA);
+
+    if ((GetVersionEx((LPOSVERSIONINFOA) &osv)) && (osv.dwPlatformId != VER_PLATFORM_WIN32_NT))
+        is_wide = 0;
+}
+#endif
+
+static HANDLE FindFirstFileCompat(const char *pattern, union FIND_DATA *lpFindFileData) {
+    wchar_t pattern_w[MAX_PATH];
+    HANDLE handle;
+
+    if (!is_wide)
+        return FindFirstFileA(pattern, &lpFindFileData->ansi);
+
+    if (!MultiByteToWideChar(CP_UTF8, MB_ERR_INVALID_CHARS, pattern, -1, pattern_w, sizeof(pattern_w) / sizeof(*pattern_w)))
+        return INVALID_HANDLE_VALUE;
+
+    handle = FindFirstFileW(pattern_w, &lpFindFileData->wide);
+    if (handle != INVALID_HANDLE_VALUE) {
+        char filename[MAX_PATH];
+        if (WideCharToMultiByte(CP_UTF8, 0, lpFindFileData->wide.cFileName, -1, filename, MAX_PATH, NULL, NULL))
+            strncpy(lpFindFileData->ansi.cFileName, filename, MAX_PATH);
+        else {
+            FindClose(handle);
+            handle = INVALID_HANDLE_VALUE;
+        }
+    }
+
+    return handle;
+}
+
+static BOOL FindNextFileCompat(HANDLE hFindHandle, union FIND_DATA *lpFindFileData) {
+    if (!is_wide)
+        return FindNextFileA(hFindHandle, &lpFindFileData->ansi);
+
+    if (!FindNextFileW(hFindHandle, &lpFindFileData->wide))
+        return FALSE;
+
+    char filename[MAX_PATH];
+    if (!WideCharToMultiByte(CP_UTF8, 0, lpFindFileData->wide.cFileName, -1, filename, MAX_PATH, NULL, NULL))
+        return FALSE;
+
+    strncpy(lpFindFileData->ansi.cFileName, filename, MAX_PATH);
+
+    return TRUE;
+}
+
+
 int glob(const char *pattern, int flags,
          int (*errfunc)(const char *epath, int eerrno), glob_t *pglob)
 {
     HANDLE searchhndl;
-    WIN32_FIND_DATA found_file;
+    union FIND_DATA found_file;
     if (errfunc)
         printf("glob():ERROR:Sorry errfunc not supported by this implementation\n");
     if (flags)
         printf("glob():ERROR:Sorry no flags supported by this globimplementation\n");
     //printf("PATTERN \"%s\"\n",pattern);
     pglob->gl_pathc = 0;
-    searchhndl      = FindFirstFile(pattern, &found_file);
+    searchhndl      = FindFirstFileCompat(pattern, &found_file);
     if (searchhndl == INVALID_HANDLE_VALUE) {
         if (GetLastError() == ERROR_FILE_NOT_FOUND) {
             pglob->gl_pathc = 0;
@@ -49,10 +108,10 @@ int glob(const char *pattern, int flags,
         }
     }
     pglob->gl_pathv    = malloc(sizeof(char *));
-    pglob->gl_pathv[0] = strdup(found_file.cFileName);
+    pglob->gl_pathv[0] = strdup(found_file.ansi.cFileName);
     pglob->gl_pathc++;
     while (1) {
-        if (!FindNextFile(searchhndl, &found_file)) {
+        if (!FindNextFileCompat(searchhndl, &found_file)) {
             if (GetLastError() == ERROR_NO_MORE_FILES) {
                 //printf("glob(): no more files found\n");
                 break;
@@ -64,7 +123,7 @@ int glob(const char *pattern, int flags,
             //printf("glob: found file %s\n",found_file.cFileName);
             pglob->gl_pathc++;
             pglob->gl_pathv = realloc(pglob->gl_pathv, pglob->gl_pathc * sizeof(char *));
-            pglob->gl_pathv[pglob->gl_pathc - 1] = strdup(found_file.cFileName);
+            pglob->gl_pathv[pglob->gl_pathc - 1] = strdup(found_file.ansi.cFileName);
         }
     }
     FindClose(searchhndl);
diff --git a/parser-mpcmd.c b/parser-mpcmd.c
index 4d29885..0573184 100644
--- a/parser-mpcmd.c
+++ b/parser-mpcmd.c
@@ -31,6 +31,10 @@
 #include <assert.h>
 #endif
 
+#ifdef _WIN32
+#include "osdep/glob.h"
+#endif
+
 #include "mp_msg.h"
 #include "help_mp.h"
 #include "m_option.h"
@@ -265,6 +269,32 @@ m_config_parse_mp_command_line(m_config_t *config, int argc, char **argv)
                 play_tree_add_file(entry,argv[i]);
              }
         } else {
+#ifdef _WIN32
+        int j, doglob = 0;
+        for (j = 0; j < strlen(argv[i]); j++) {
+            if ((j > 2) && argv[i][j] == ':') { // c: vs http:
+                doglob = 0;
+                break;
+            }
+            if (strchr("*?", argv[i][j])) {
+                doglob = 1;
+                break;
+            }
+        }
+        if (doglob) {
+            glob_t gg;
+            if (!glob(argv[i], 0, NULL, &gg)) {
+                for (j = 0; j < gg.gl_pathc; j++) {
+                    if (j) entry = play_tree_new();
+                    play_tree_add_file(entry, gg.gl_pathv[j]);
+                    add_entry(&last_parent, &last_entry, entry);
+                    last_entry = entry;
+                }
+                globfree(&gg);
+            }
+        }
+        else
+#endif
 	play_tree_add_file(entry,argv[i]);
 	}
 
-- 
2.5.0

