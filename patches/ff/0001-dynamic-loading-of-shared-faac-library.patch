From f3167cb6b1689dabe37a2e4ea647fa94ac595128 Mon Sep 17 00:00:00 2001
From: sherpya <sherpya@netfarm.it>
Date: Sun, 17 Jan 2016 19:42:54 +0100
Subject: [PATCH 1/9] dynamic loading of shared faac library

---
 configure            |  3 +--
 libavcodec/libfaac.c | 75 +++++++++++++++++++++++++++++++++++++++++++++-------
 2 files changed, 67 insertions(+), 11 deletions(-)

diff --git a/configure b/configure
index 94a66d8..bdba677 100755
--- a/configure
+++ b/configure
@@ -4946,7 +4946,6 @@ die_license_disabled gpl libxvid
 die_license_disabled gpl x11grab
 
 die_license_disabled nonfree cuda
-die_license_disabled nonfree libfaac
 die_license_disabled nonfree nvenc
 enabled gpl && die_license_disabled_gpl nonfree libfdk_aac
 enabled gpl && die_license_disabled_gpl nonfree openssl
@@ -5534,7 +5533,7 @@ enabled libcelt           && require libcelt celt/celt.h celt_decode -lcelt0 &&
                              { check_lib celt/celt.h celt_decoder_create_custom -lcelt0 ||
                                die "ERROR: libcelt must be installed and version must be >= 0.11.0."; }
 enabled libcaca           && require_pkg_config caca caca.h caca_create_canvas
-enabled libfaac           && require2 libfaac "stdint.h faac.h" faacEncGetVersion -lfaac
+enabled libfaac           && check_header "stdint.h faac.h"
 enabled libfdk_aac        && { use_pkg_config fdk-aac "fdk-aac/aacenc_lib.h" aacEncOpen ||
                                { require libfdk_aac fdk-aac/aacenc_lib.h aacEncOpen -lfdk-aac &&
                                  warn "using libfdk without pkg-config"; } }
diff --git a/libavcodec/libfaac.c b/libavcodec/libfaac.c
index 98b3ba8..33aae7c 100644
--- a/libavcodec/libfaac.c
+++ b/libavcodec/libfaac.c
@@ -32,6 +32,48 @@
 #include "audio_frame_queue.h"
 #include "internal.h"
 
+#ifndef _WIN32
+#include <dlfcn.h>
+#define LIBEXT "so"
+#else
+#include <windows.h>
+#define LIBEXT "dll"
+#define dlopen(fname, f) ((void *) LoadLibraryA(fname))
+#define dlclose(handle) FreeLibrary((HMODULE) handle)
+#define dlsym(handle, name) GetProcAddress((HMODULE) handle, name)
+#endif
+
+#ifndef FAACAPI
+#define FAACAPI
+#endif
+
+typedef faacEncHandle (FAACAPI *imp_faacEncOpen)(unsigned long, unsigned int numChannels, unsigned long *, unsigned long *);
+typedef int (FAACAPI *imp_faacEncClose)(faacEncHandle);
+typedef int (FAACAPI *imp_faacEncEncode)(faacEncHandle , signed int *, unsigned int, unsigned char *, unsigned int);
+typedef int (FAACAPI *imp_faacEncSetConfiguration)(faacEncHandle, faacEncConfigurationPtr);
+typedef faacEncConfigurationPtr (FAACAPI *imp_faacEncGetCurrentConfiguration)(faacEncHandle);
+typedef int (FAACAPI *imp_faacEncGetDecoderSpecificInfo)(faacEncHandle, unsigned char **, unsigned long *);
+
+typedef struct _faacLib
+{
+    imp_faacEncOpen faacEncOpen;
+    imp_faacEncClose faacEncClose;
+    imp_faacEncEncode faacEncEncode;
+    imp_faacEncSetConfiguration faacEncSetConfiguration;
+    imp_faacEncGetCurrentConfiguration faacEncGetCurrentConfiguration;
+    imp_faacEncGetDecoderSpecificInfo faacEncGetDecoderSpecificInfo;
+} faacLib;
+
+#define DLSYM(x) \
+    do \
+    { \
+        s->pfn.x = ( imp_##x ) dlsym(s->hLib, AV_STRINGIFY(x)); \
+        if (!s->pfn.x ) \
+        { \
+            av_log(avctx, AV_LOG_ERROR, "Unable to find symbol " AV_STRINGIFY(x) " in dynamic libfaac." LIBEXT "\n"); \
+            return -1; \
+        } \
+    } while (0)
 
 /* libfaac has an encoder delay of 1024 samples */
 #define FAAC_DELAY_SAMPLES 1024
@@ -39,6 +81,8 @@
 typedef struct FaacAudioContext {
     faacEncHandle faac_handle;
     AudioFrameQueue afq;
+    void *hLib;
+    faacLib pfn;
 } FaacAudioContext;
 
 static av_cold int Faac_encode_close(AVCodecContext *avctx)
@@ -48,9 +92,10 @@ static av_cold int Faac_encode_close(AVCodecContext *avctx)
     av_freep(&avctx->extradata);
     ff_af_queue_close(&s->afq);
 
-    if (s->faac_handle)
-        faacEncClose(s->faac_handle);
-
+    if (s->hLib && s->faac_handle) {
+        s->pfn.faacEncClose(s->faac_handle);
+        dlclose(s->hLib);
+    }
     return 0;
 }
 
@@ -68,6 +113,18 @@ static av_cold int Faac_encode_init(AVCodecContext *avctx)
     unsigned long samples_input, max_bytes_output;
     int ret;
 
+    if (!(s->hLib = dlopen("libfaac." LIBEXT, RTLD_NOW))) {
+        av_log(avctx, AV_LOG_ERROR, "Unable to load libfaac." LIBEXT "\n");
+        return -1;
+    }
+
+    DLSYM(faacEncOpen);
+    DLSYM(faacEncClose);
+    DLSYM(faacEncEncode);
+    DLSYM(faacEncSetConfiguration);
+    DLSYM(faacEncGetCurrentConfiguration);
+    DLSYM(faacEncGetDecoderSpecificInfo);
+
     /* number of channels */
     if (avctx->channels < 1 || avctx->channels > 6) {
         av_log(avctx, AV_LOG_ERROR, "encoding %d channel(s) is not allowed\n", avctx->channels);
@@ -75,7 +132,7 @@ static av_cold int Faac_encode_init(AVCodecContext *avctx)
         goto error;
     }
 
-    s->faac_handle = faacEncOpen(avctx->sample_rate,
+    s->faac_handle = s->pfn.faacEncOpen(avctx->sample_rate,
                                  avctx->channels,
                                  &samples_input, &max_bytes_output);
     if (!s->faac_handle) {
@@ -85,7 +142,7 @@ static av_cold int Faac_encode_init(AVCodecContext *avctx)
     }
 
     /* check faac version */
-    faac_cfg = faacEncGetCurrentConfiguration(s->faac_handle);
+    faac_cfg = s->pfn.faacEncGetCurrentConfiguration(s->faac_handle);
     if (faac_cfg->version != FAAC_CFG_VERSION) {
         av_log(avctx, AV_LOG_ERROR, "wrong libfaac version (compiled for: %d, using %d)\n", FAAC_CFG_VERSION, faac_cfg->version);
         ret = AVERROR(EINVAL);
@@ -136,7 +193,7 @@ static av_cold int Faac_encode_init(AVCodecContext *avctx)
         unsigned char *buffer = NULL;
         unsigned long decoder_specific_info_size;
 
-        if (!faacEncGetDecoderSpecificInfo(s->faac_handle, &buffer,
+        if (!s->pfn.faacEncGetDecoderSpecificInfo(s->faac_handle, &buffer,
                                            &decoder_specific_info_size)) {
             avctx->extradata = av_malloc(decoder_specific_info_size + AV_INPUT_BUFFER_PADDING_SIZE);
             if (!avctx->extradata) {
@@ -150,11 +207,11 @@ static av_cold int Faac_encode_init(AVCodecContext *avctx)
         free(buffer);
     }
 
-    if (!faacEncSetConfiguration(s->faac_handle, faac_cfg)) {
+    if (!s->pfn.faacEncSetConfiguration(s->faac_handle, faac_cfg)) {
         int i;
         for (i = avctx->bit_rate/1000; i ; i--) {
             faac_cfg->bitRate = 1000*i / avctx->channels;
-            if (faacEncSetConfiguration(s->faac_handle, faac_cfg))
+            if (s->pfn.faacEncSetConfiguration(s->faac_handle, faac_cfg))
                 break;
         }
         if (!i) {
@@ -187,7 +244,7 @@ static int Faac_encode_frame(AVCodecContext *avctx, AVPacket *avpkt,
     if ((ret = ff_alloc_packet2(avctx, avpkt, (7 + 768) * avctx->channels, 0)) < 0)
         return ret;
 
-    bytes_written = faacEncEncode(s->faac_handle, samples,
+    bytes_written = s->pfn.faacEncEncode(s->faac_handle, samples,
                                   num_samples * avctx->channels,
                                   avpkt->data, avpkt->size);
     if (bytes_written < 0) {
-- 
2.8.0.rc3

